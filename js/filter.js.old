// 筛选功能修复版本
console.log('加载筛选功能修复版本 v1.0');

// 設置賽程篩選功能
function setupScheduleFilters() {
    console.log('設置賽程篩選功能');
    const teamButtons = document.querySelectorAll('.team-btn');
    console.log('找到篩選按鈕數量:', teamButtons.length);
    
    if (teamButtons.length === 0) {
        console.warn('警告: 未找到任何篩選按鈕，請確認頁面加載正確');
        return;
    }
    
    // 記錄找到的所有按鈕信息
    teamButtons.forEach((btn, idx) => {
        const team = btn.getAttribute('data-team');
        const hasClass = btn.classList.contains('selected');
        console.log(`按鈕 ${idx}: team=${team}, 是否選中=${hasClass}, 內容文本="${btn.textContent}"`);
    });
    
    // 創建一個新的Set來存儲選中的隊伍
    // 確保每次重新加載頁面時都重置篩選狀態
    const selectedTeams = new Set();
    
    // 為每個按鈕添加點擊事件
    teamButtons.forEach(button => {
        const team = button.getAttribute('data-team');
        
        // 移除現有事件(如果有的話)
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);
        
        // 添加新的事件監聽器
        newButton.addEventListener('click', function() {
            const team = this.getAttribute('data-team');
            console.log(`點擊按鈕: ${team}`);
            
            if (this.classList.contains('selected')) {
                // 如果已選中，則取消選中
                console.log(`取消選中: ${team}`);
                this.classList.remove('selected');
                selectedTeams.delete(team);
            } else {
                // 如果未選中，則選中
                console.log(`選中: ${team}`);
                this.classList.add('selected');
                selectedTeams.add(team);
            }
            
            console.log('當前選中的隊伍:', Array.from(selectedTeams));
            
            // 篩選表格
            filterScheduleTable(Array.from(selectedTeams));
        });
    });
    
    console.log('賽程篩選功能設置完成');
}

// 根據選中的隊伍篩選賽程表格
function filterScheduleTable(selectedTeams) {
    console.log('篩選賽程表格，選中的隊伍:', selectedTeams);
    
    const tbody = document.querySelector('.schedule-table tbody');
    if (!tbody) {
        console.error('未找到表格主體');
        return;
    }
    
    const rows = tbody.querySelectorAll('tr');
    console.log(`找到表格行: ${rows.length} 行`);
    
    // 如果沒有選中任何隊伍，顯示所有行
    if (selectedTeams.length === 0) {
        console.log('沒有選中任何隊伍，顯示所有行');
        rows.forEach(row => {
            row.style.display = '';
            row.querySelectorAll('td').forEach(cell => {
                cell.classList.remove('highlight-team');
            });
        });
        return;
    }
    
    // 篩選行
    rows.forEach((row, idx) => {
        const cells = row.querySelectorAll('td');
        if (cells.length < 4) {
            console.log(`行 ${idx+1} 單元格數量不足: ${cells.length}`);
            return;
        }
        
        // 單元格索引: 1=客隊, 3=主隊
        const awayTeam = cells[1].textContent.trim();
        const homeTeam = cells[3].textContent.trim();
        
        console.log(`行 ${idx+1}: 客隊="${awayTeam}", 主隊="${homeTeam}"`);
        
        // 檢查是否包含選中的隊伍
        const matchFound = selectedTeams.some(team => 
            awayTeam.includes(team) || homeTeam.includes(team)
        );
        
        console.log(`行 ${idx+1} 匹配結果: ${matchFound}`);
        
        // 顯示或隱藏行
        row.style.display = matchFound ? '' : 'none';
        
        // 高亮匹配的隊伍
        if (matchFound) {
            // 檢查客隊
            if (selectedTeams.some(team => awayTeam.includes(team))) {
                cells[1].classList.add('highlight-team');
            } else {
                cells[1].classList.remove('highlight-team');
            }
            
            // 檢查主隊
            if (selectedTeams.some(team => homeTeam.includes(team))) {
                cells[3].classList.add('highlight-team');
            } else {
                cells[3].classList.remove('highlight-team');
            }
        }
    });
    
    console.log('篩選完成');
}

// DOM加载完成后初始化筛选功能
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded事件触发');
    setTimeout(function() {
        setupScheduleFilters();
    }, 500);
});

// 確保在任何頁面操作後都能重新初始化篩選功能
function initializeFilters() {
    console.log('手動初始化篩選功能');
    setupScheduleFilters();
}

// 暴露函數到全局範圍，使其可以從HTML調用
window.initializeFilters = initializeFilters;
window.setupScheduleFilters = setupScheduleFilters;
window.filterScheduleTable = filterScheduleTable; 